export const MESSAGE = {
    ROUTER_POST_INFO: 'QuestionRouter post(): post Method called.',
    ROUTER_GETALL_INFO: 'QuestionRouter get():get method called to get all data in the table.',
    ROUTER_GET_INFO: 'QuestionRouter get(): get Method called for getBYId.',
    ROUTER_UPDATE_INFO: 'QuestionRouter put():put method is called for update the table.',
    ROUTER_DELETE_INFO: 'QuestionRouter delete():Delete method was called for deletion .',
    CONTROLLER_POST_INFO: 'QuestionController questionCreate():Table creation in Post Method.',
    CONTROLLER_GETALL_INFO: 'QuestionController questionGet():Table getting by getAll Method.',
    CONTROLLER_GET_INFO: 'QuestionController questionRead():Table getting by Id in getBYId Method.',
    CONTROLLER_UPDATE_INFO: 'QuestionController questionUpdate():Table updates by update Method.',
    CONTROLLER_DELETE_INFO: 'QuestionController questionDelete():Table deleted by delete Method.',
    CONTROLLER_POST_ERROR: 'QuestionController questionCreate():Error on creating the table in Post Method.===>',
    CONTROLLER_GETALL_ERROR: 'QuestionController questionGetAll():Error on getting all data in the table by getAll Method.===>',
    CONTROLLER_GET_ERROR: 'QuestionController questionRead():Error on getting the data by id in the table by getBYId Method.===>',
    CONTROLLER_UPDATE_ERROR: 'QuestionController questionUpdate():Error on updating the table by id using put Method.===>',
    CONTROLLER_DELETE_ERROR: 'QuestionController questionDeleted():Error on deleting in the table by id using delete Method.===>',
    SERVICE_POST_INFO: 'QuestionService questionCreate():Table creation in Post Method.',
    SERVICE_GETALL_INFO: 'QuestionService questionGet():Table getting by getAll Method.',
    SERVICE_GET_INFO: 'QuestionService questionRead():Table getting data by id in getBYId Method.',
    SERVICE_UPDATE_INFO: 'QuestionService questionUpdate():Table updation by update Method.',
    SERVICE_DELETE_INFO: 'QuestionService questionDelete():Table deletion by delete Method.',
    DAO_POST_INFO: 'QuestionDao save():Saving the data through Post Method.',
    DAO_GETALL_INFO: 'QuestionDao getAll():Getting the data from table by getAll Method.',
    DAO_GET_INFO: 'QuestionDao getById():Getting the data by id in from table using getBYId Method.',
    DAO_UPDATE_INFO: 'QuestionDao findByIdAndUpdate():Table updatation by update Method.',
    DAO_DELETE_INFO: 'QuestionDao findByIdAndDelete():Table deletion by delete Method.',
    DAO_USER_LOGIN_INFO: 'UserDao save():Saving the data(login credentials) through Post Method.',
    DAO_REGISTER_INFO: 'UserDao getUser():Getting the data(login credentials).',
    SERVICE_USER_LOGIN_INFO: 'UserService login():Login creation in Post Method was done here.',
    SERVICE_REGISTER_INFO: 'UserService register():Register in Game was done here.',
    CONTROLLER_USER_INFO: 'UserController login():Login creation for users in Post Method is invoked.',
    CONTROLLER_REGISTER_INFO: 'UserController registration():Registration for users is invoked.',
    CONTROLLER_LOGIN_ERROR: 'UserController createLogin():Error on creating the login table through Post Method.===>',
    CONTROLLER_REGISTER_ERROR: 'UserController registration():Error on registration.===>',
    ROUTER_POST_REGISTER_INFO: 'Router post(): Registration was done successfully !!',
    ROUTER_POST_LOGIN_INFO: 'Router post(): Login was done successfully !!!',

}